"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
/*
Handles the API Gateway event for the /forParticipant endpoint
Expects a participantCode in the body in format: {
    participantCode: number
}
Returns a list of S3 urls from the ProcessedBucket for the
participant code in the format: [
    {
        ingress: <key:string>,
        thumbnail: <url:string>,
        large: <url:string>
    }
]
 */
const allowedOrigins = [
    'http://localhost:3000',
    'http://localhost:5173',
];
const handler = async (event) => {
    //Setup context
    const ddb = new AWS.DynamoDB();
    const PROCESSED_BUCKET = process.env.PROCESSED_BUCKET;
    const METADATA_TABLE = process.env.METADATA_TABLE;
    const PARTICIPANT_TABLE = process.env.PARTICIPANT_TABLE;
    if (!PROCESSED_BUCKET) {
        throw new Error('PROCESSED_BUCKET environment variable not set');
    }
    if (!METADATA_TABLE) {
        throw new Error('METADATA_TABLE environment variable not set');
    }
    if (!PARTICIPANT_TABLE) {
        throw new Error('PARTICIPANT_TABLE environment variable not set');
    }
    //get allowed origin
    // let origin = event.headers['Origin'] || '';
    // if (!allowedOrigins.includes(origin)) {
    //     console.log('Origin not allowed:', origin);
    //     return {
    //         statusCode: 403,
    //         body: JSON.stringify({
    //             message: 'Origin not allowed'
    //         })
    //     }
    // }
    //Generate headers
    let headers = {
        "Access-Control-Allow-Headers": "Content-Type,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers",
        "Access-Control-Allow-Origin": '*',
        "Access-Control-Allow-Methods": "OPTIONS,POST"
    };
    //Parse the body
    console.log('Received event:', JSON.stringify(event, null, 2));
    let body;
    try {
        body = JSON.parse(event.body || '{}');
    }
    catch (e) {
        console.error('Failed to parse request body', e);
        return {
            statusCode: 400,
            Headers: headers,
            body: JSON.stringify({
                message: 'Invalid request body'
            })
        };
    }
    //Check the body
    if (!body.participantCode) {
        console.log('Missing participantCode in body', body);
        return {
            statusCode: 400,
            headers,
            body: JSON.stringify({
                message: 'participantCode is required'
            })
        };
    }
    //Get the participant code
    const participantCode = body.participantCode;
    //Query the participant table
    let queryResult;
    try {
        queryResult = await ddb.query({
            TableName: PARTICIPANT_TABLE,
            KeyConditionExpression: 'participantCode = :participantCode',
            ExpressionAttributeValues: {
                ':participantCode': { N: participantCode.toString() }
            }
        }).promise();
    }
    catch (e) {
        console.error('Failed to query participant table', e);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                message: 'Failed to query participant table'
            })
        };
    }
    //Process the query result
    let items = queryResult.Items || [];
    let ingressKeys = items.map(item => item.ingressKeys?.SS || []).flat();
    console.log('Found ingress keys:', ingressKeys);
    //Respond with an empty array if no keys were found
    if (ingressKeys.length === 0) {
        console.log('No keys found for participant code', participantCode);
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify([])
        };
    }
    //Collect the metadata for the ingress keys
    let metadataQueryResult;
    try {
        metadataQueryResult = await ddb.batchGetItem({
            RequestItems: {
                [METADATA_TABLE]: {
                    Keys: ingressKeys.map(key => {
                        return {
                            ingressKey: { S: key }
                        };
                    })
                }
            }
        }).promise();
    }
    catch (e) {
        console.error('Failed to query metadata table', e);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                message: 'Failed to query metadata table'
            })
        };
    }
    //Process the metadata query result
    let metadataItems = metadataQueryResult.Responses?.[METADATA_TABLE] || [];
    let responseItems = metadataItems.map(item => {
        return {
            ingress: item.ingressKey.S,
            thumbnail: `https://${PROCESSED_BUCKET}.s3.amazonaws.com/${item.thumbnailKey.S}`,
            large: `https://${PROCESSED_BUCKET}.s3.amazonaws.com/${item.fullsizeKey.S}`
        };
    });
    console.log('Successfully processed request', responseItems);
    return {
        statusCode: 200,
        headers,
        body: JSON.stringify(responseItems)
    };
    // let queryResult;
    // try {
    //     queryResult = await ddb.query({
    //         TableName: METADATA_TABLE,
    //         KeyConditionExpression: 'participantCode = :participantCode',
    //         ExpressionAttributeValues: {
    //             ':participantCode': { N: participantCode.toString() }
    //         }
    //     }).promise();
    // } catch (e) {
    //     console.error('Failed to query metadata table', e);
    //     return {
    //         statusCode: 500,
    //         body: JSON.stringify({
    //             message: 'Failed to query metadata table'
    //         })
    //     }
    // }
    // //Process the query result
    // let items = queryResult.Items || [];
    // let responseItems = items.map(item => {
    //     return {
    //         ingress: item.ingressKey.S,
    //         thumbnail: `https://${PROCESSED_BUCKET}.s3.amazonaws.com/${item.thumbnailKey.S}`,
    //         large: `https://${PROCESSED_BUCKET}.s3.amazonaws.com/${item.fullsizeKey.S}`
    //     }
    // })
    // console.log('Successfully processed request', responseItems);
    // return {
    //     statusCode: 200,
    //     body: JSON.stringify(responseItems)
    // }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,
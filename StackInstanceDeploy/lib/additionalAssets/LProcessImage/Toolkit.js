"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processImage = void 0;
const sharp = require("sharp");
const sizes = [
    { size: 500, name: 'thumbnail' },
    { size: 2000, name: 'large' },
];
async function processImage(ctx) {
    const params = {
        Bucket: ctx.ingressBucket,
        Key: ctx.ingressKey,
    };
    console.log('Getting object from S3', params);
    const data = await ctx.s3.getObject(params).promise()
        .then(data => {
        return data.Body;
    });
    //Check data is a buffer
    if (!Buffer.isBuffer(data)) {
        return {
            success: false,
            message: 'Data is not a buffer',
            data
        };
    }
    //Convert to PNG and fix orientation
    console.log('Performing rotation fix and conversion to PNG');
    let imageBuffer = await sharp(data).rotate().png().toBuffer();
    //Process the image while generating sizes
    //to be implemented.
    let participantCodesPromise = getParticipantCodes({
        ibuffer: imageBuffer
    });
    //Generate sizes
    console.log('Generating image sizes');
    let imageSizes = await Promise.all(sizes.map(size => {
        return generateImageSize({
            s3: ctx.s3,
            ingressMediaKey: ctx.ingressKey,
            ingressMediaData: imageBuffer,
            processedBucket: ctx.processedBucket,
            size: size.size,
            sizeName: size.name,
        });
    }));
    //Save metadata
    console.log('Saving metadata');
    let metadataItem = {
        ingressKey: ctx.ingressKey,
        participantCodes: await participantCodesPromise,
        thumbnailKey: imageSizes.find(key => key.includes('thumbnail')) || '',
        fullsizeKey: imageSizes.find(key => key.includes('large')) || '',
    };
    await ctx.ddb.putItem({
        TableName: ctx.metadataTable,
        Item: {
            ingressKey: { S: ctx.ingressKey },
            participantCodes: { NS: metadataItem.participantCodes.map(code => code.toString()) },
            thumbnailKey: { S: metadataItem.thumbnailKey },
            fullsizeKey: { S: metadataItem.fullsizeKey },
        }
    }).promise();
    //Save participant metadata
    console.log('Saving participant metadata');
    await Promise.all(metadataItem.participantCodes.map(async (code) => {
        //Update/create entries so that their current list of ingressKeys includes the new key.
        let currentKeys = [];
        try {
            let result = await ctx.ddb.updateItem({
                TableName: ctx.participantTable,
                Key: {
                    participantCode: { N: code.toString() },
                },
                UpdateExpression: 'ADD ingressKeys :newKey',
                ExpressionAttributeValues: {
                    ':newKey': { SS: [ctx.ingressKey] },
                },
                ReturnValues: 'UPDATED_NEW',
            }).promise();
            currentKeys = result.Attributes?.ingressKeys?.SS || [];
        }
        catch (e) {
            console.error('Failed to update participant metadata', e);
            return;
        }
        console.log(`Updated participant metadata for code ${code} to include ${ctx.ingressKey}. Current keys: ${currentKeys}`);
    }));
    console.log('All Metadata saved');
    console.log('Finishing up');
    return {
        success: true,
        message: 'Image processed successfully',
        data: {
            sizes: sizes.map(size => {
                return `${size.name}: ${size.size}px`;
            }),
            processedImages: imageSizes,
        }
    };
}
exports.processImage = processImage;
// This function will generate a new image with the specified size, upload it to the processed bucket, and return the key.
async function generateImageSize(ctx) {
    // Do the image resizing here.
    // Return the new image data.
    let ibuffer = sharp(ctx.ingressMediaData).resize(ctx.size, ctx.size).png({ quality: 80 }).toBuffer();
    // Upload the new image to the processed bucket.
    let keyWithoutExtension = ctx.ingressMediaKey.split('.').slice(0, -1).join('.');
    let key = `${keyWithoutExtension}-${ctx.sizeName}.png`;
    let params = {
        Bucket: ctx.processedBucket,
        Key: key,
        Body: await ibuffer,
    };
    await ctx.s3.putObject(params).promise();
    return key;
}
async function getParticipantCodes(ctx) {
    // Do the OCR here.
    // Return the participant codes.
    return [1, 2, 3, 4, 5];
}
//# sourceMappingURL=data:application/json;base64,
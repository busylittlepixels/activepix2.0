"use strict";
/**
 * LProcessImage - Lambda function that processes images uploaded to MediaIngress bucket, outputting to ProcessedMedia bucket.
    - Scans the images for participant codes.
    - Applies any overlays to the image
    - Creates a max 2000x2000 variant of the image and uploads it to the ProcessedMedia bucket.
    - Creates a max 500x500 variant of the image and uploads it to the ProcessedMedia bucket.
    - Creates an entry in the ProcessedImageMetadata table for each image containing:
    - - Detected participant codes
    - - Thumbnail URL
    - - Fullsize URL

    Notes from CDK:
    environment: {
        MEDIA_BUCKET: MediaIngressBucket.bucketName,
        PROCESSED_BUCKET: ProcessedBucket.bucketName,
        METADATA_TABLE: ProcessedImageMetadataTable.tableName
    },
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const Toolkit = require("./Toolkit");
const handler = async (event) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    //Setup context
    const MEDIA_BUCKET = process.env.MEDIA_BUCKET;
    const PROCESSED_BUCKET = process.env.PROCESSED_BUCKET;
    const METADATA_TABLE = process.env.METADATA_TABLE;
    const PARTICIPANT_TABLE = process.env.PARTICIPANT_TABLE;
    if (!MEDIA_BUCKET) {
        throw new Error('MEDIA_BUCKET environment variable not set');
    }
    if (!PROCESSED_BUCKET) {
        throw new Error('PROCESSED_BUCKET environment variable not set');
    }
    if (!METADATA_TABLE) {
        throw new Error('METADATA_TABLE environment variable not set');
    }
    if (!PARTICIPANT_TABLE) {
        throw new Error('PARTICIPANT_TABLE environment variable not set');
    }
    const s3 = new AWS.S3();
    const ddb = new AWS.DynamoDB();
    let errors = [];
    let successes = [];
    for (const record of event.Records) {
        const bucket = record.s3.bucket.name;
        const key = record.s3.object.key;
        console.log(`Processing image: ${key} from bucket: ${bucket}`);
        //
        // Process the image
        //
        let attemptResult = await Toolkit.processImage({
            s3,
            ddb,
            ingressBucket: MEDIA_BUCKET,
            processedBucket: PROCESSED_BUCKET,
            ingressKey: key,
            metadataTable: METADATA_TABLE,
            participantTable: PARTICIPANT_TABLE,
        });
        if (!attemptResult.success) {
            console.error(`Failed to process image: ${key} from bucket: ${bucket}`, attemptResult);
            continue;
        }
        else {
            console.log(`Successfully processed image: ${key} from bucket: ${bucket}`, attemptResult);
            successes.push(attemptResult);
        }
    }
    if (errors.length > 0) {
        console.error('Failed to process some images', errors);
    }
    console.log({
        message: 'Processing finished with, ' + errors.length + ' errors',
        errors: errors,
        successes: successes,
    });
    // return {
    //     statusCode: 200,
    //     Body: JSON.stringify(),
    // };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOzs7QUFHQywrQkFBK0I7QUFDbkMscUNBQXFDO0FBRTlCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFjLEVBQUUsRUFBRTtJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELGVBQWU7SUFDZixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUM5QyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7SUFDdEQsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7SUFDbEQsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQ0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUc5QixJQUFJLE1BQU0sR0FBUyxFQUFFLENBQUM7SUFDdEIsSUFBSSxTQUFTLEdBQVMsRUFBRSxDQUFDO0lBQ3pCLEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNyQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxpQkFBaUIsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMvRCxFQUFFO1FBQ0Ysb0JBQW9CO1FBQ3BCLEVBQUU7UUFDRixJQUFJLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDM0MsRUFBRTtZQUNGLEdBQUc7WUFDSCxhQUFhLEVBQUUsWUFBWTtZQUMzQixlQUFlLEVBQUUsZ0JBQWdCO1lBQ2pDLFVBQVUsRUFBRSxHQUFHO1lBQ2YsYUFBYSxFQUFFLGNBQWM7WUFDN0IsZ0JBQWdCLEVBQUUsaUJBQWlCO1NBQ3RDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsR0FBRyxpQkFBaUIsTUFBTSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDdkYsU0FBUztRQUNiLENBQUM7YUFBTSxDQUFDO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsR0FBRyxpQkFBaUIsTUFBTSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDMUYsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ1IsT0FBTyxFQUFFLDRCQUE0QixHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUztRQUNqRSxNQUFNLEVBQUUsTUFBTTtRQUNkLFNBQVMsRUFBRSxTQUFTO0tBQ3ZCLENBQUMsQ0FBQTtJQUNGLFdBQVc7SUFDWCx1QkFBdUI7SUFDdkIsOEJBQThCO0lBQzlCLEtBQUs7QUFDVCxDQUFDLENBQUE7QUFoRVksUUFBQSxPQUFPLFdBZ0VuQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMUHJvY2Vzc0ltYWdlIC0gTGFtYmRhIGZ1bmN0aW9uIHRoYXQgcHJvY2Vzc2VzIGltYWdlcyB1cGxvYWRlZCB0byBNZWRpYUluZ3Jlc3MgYnVja2V0LCBvdXRwdXR0aW5nIHRvIFByb2Nlc3NlZE1lZGlhIGJ1Y2tldC5cclxuICAgIC0gU2NhbnMgdGhlIGltYWdlcyBmb3IgcGFydGljaXBhbnQgY29kZXMuXHJcbiAgICAtIEFwcGxpZXMgYW55IG92ZXJsYXlzIHRvIHRoZSBpbWFnZVxyXG4gICAgLSBDcmVhdGVzIGEgbWF4IDIwMDB4MjAwMCB2YXJpYW50IG9mIHRoZSBpbWFnZSBhbmQgdXBsb2FkcyBpdCB0byB0aGUgUHJvY2Vzc2VkTWVkaWEgYnVja2V0LlxyXG4gICAgLSBDcmVhdGVzIGEgbWF4IDUwMHg1MDAgdmFyaWFudCBvZiB0aGUgaW1hZ2UgYW5kIHVwbG9hZHMgaXQgdG8gdGhlIFByb2Nlc3NlZE1lZGlhIGJ1Y2tldC5cclxuICAgIC0gQ3JlYXRlcyBhbiBlbnRyeSBpbiB0aGUgUHJvY2Vzc2VkSW1hZ2VNZXRhZGF0YSB0YWJsZSBmb3IgZWFjaCBpbWFnZSBjb250YWluaW5nOlxyXG4gICAgLSAtIERldGVjdGVkIHBhcnRpY2lwYW50IGNvZGVzXHJcbiAgICAtIC0gVGh1bWJuYWlsIFVSTFxyXG4gICAgLSAtIEZ1bGxzaXplIFVSTFxyXG5cclxuICAgIE5vdGVzIGZyb20gQ0RLOlxyXG4gICAgZW52aXJvbm1lbnQ6IHtcclxuICAgICAgICBNRURJQV9CVUNLRVQ6IE1lZGlhSW5ncmVzc0J1Y2tldC5idWNrZXROYW1lLFxyXG4gICAgICAgIFBST0NFU1NFRF9CVUNLRVQ6IFByb2Nlc3NlZEJ1Y2tldC5idWNrZXROYW1lLFxyXG4gICAgICAgIE1FVEFEQVRBX1RBQkxFOiBQcm9jZXNzZWRJbWFnZU1ldGFkYXRhVGFibGUudGFibGVOYW1lXHJcbiAgICB9LFxyXG4gKi9cclxuXHJcbiAgICBpbXBvcnQgeyBTM0V2ZW50fSBmcm9tICdhd3MtbGFtYmRhJztcclxuICAgIGltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcclxuaW1wb3J0ICogYXMgVG9vbGtpdCBmcm9tICcuL1Rvb2xraXQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IFMzRXZlbnQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBldmVudDonLCBKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpO1xyXG4gICAgLy9TZXR1cCBjb250ZXh0XHJcbiAgICBjb25zdCBNRURJQV9CVUNLRVQgPSBwcm9jZXNzLmVudi5NRURJQV9CVUNLRVQ7XHJcbiAgICBjb25zdCBQUk9DRVNTRURfQlVDS0VUID0gcHJvY2Vzcy5lbnYuUFJPQ0VTU0VEX0JVQ0tFVDtcclxuICAgIGNvbnN0IE1FVEFEQVRBX1RBQkxFID0gcHJvY2Vzcy5lbnYuTUVUQURBVEFfVEFCTEU7XHJcbiAgICBjb25zdCBQQVJUSUNJUEFOVF9UQUJMRSA9IHByb2Nlc3MuZW52LlBBUlRJQ0lQQU5UX1RBQkxFO1xyXG4gICAgaWYgKCFNRURJQV9CVUNLRVQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01FRElBX0JVQ0tFVCBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIVBST0NFU1NFRF9CVUNLRVQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BST0NFU1NFRF9CVUNLRVQgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFNRVRBREFUQV9UQUJMRSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTUVUQURBVEFfVEFCTEUgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFQQVJUSUNJUEFOVF9UQUJMRSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUEFSVElDSVBBTlRfVEFCTEUgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHMzID0gbmV3IEFXUy5TMygpO1xyXG4gICAgY29uc3QgZGRiID0gbmV3IEFXUy5EeW5hbW9EQigpXHJcblxyXG5cclxuICAgIGxldCBlcnJvcnM6YW55W10gPSBbXTtcclxuICAgIGxldCBzdWNjZXNzZXM6YW55W10gPSBbXTtcclxuICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIGV2ZW50LlJlY29yZHMpIHtcclxuICAgICAgICBjb25zdCBidWNrZXQgPSByZWNvcmQuczMuYnVja2V0Lm5hbWU7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gcmVjb3JkLnMzLm9iamVjdC5rZXk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgaW1hZ2U6ICR7a2V5fSBmcm9tIGJ1Y2tldDogJHtidWNrZXR9YCk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBpbWFnZVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgbGV0IGF0dGVtcHRSZXN1bHQgPSBhd2FpdCBUb29sa2l0LnByb2Nlc3NJbWFnZSh7XHJcbiAgICAgICAgICAgIHMzLFxyXG4gICAgICAgICAgICBkZGIsXHJcbiAgICAgICAgICAgIGluZ3Jlc3NCdWNrZXQ6IE1FRElBX0JVQ0tFVCxcclxuICAgICAgICAgICAgcHJvY2Vzc2VkQnVja2V0OiBQUk9DRVNTRURfQlVDS0VULFxyXG4gICAgICAgICAgICBpbmdyZXNzS2V5OiBrZXksXHJcbiAgICAgICAgICAgIG1ldGFkYXRhVGFibGU6IE1FVEFEQVRBX1RBQkxFLFxyXG4gICAgICAgICAgICBwYXJ0aWNpcGFudFRhYmxlOiBQQVJUSUNJUEFOVF9UQUJMRSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCFhdHRlbXB0UmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHByb2Nlc3MgaW1hZ2U6ICR7a2V5fSBmcm9tIGJ1Y2tldDogJHtidWNrZXR9YCwgYXR0ZW1wdFJlc3VsdCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGltYWdlOiAke2tleX0gZnJvbSBidWNrZXQ6ICR7YnVja2V0fWAsIGF0dGVtcHRSZXN1bHQpO1xyXG4gICAgICAgICAgICBzdWNjZXNzZXMucHVzaChhdHRlbXB0UmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3Mgc29tZSBpbWFnZXMnLCBlcnJvcnMpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coe1xyXG4gICAgICAgIG1lc3NhZ2U6ICdQcm9jZXNzaW5nIGZpbmlzaGVkIHdpdGgsICcgKyBlcnJvcnMubGVuZ3RoICsgJyBlcnJvcnMnLFxyXG4gICAgICAgIGVycm9yczogZXJyb3JzLFxyXG4gICAgICAgIHN1Y2Nlc3Nlczogc3VjY2Vzc2VzLFxyXG4gICAgfSlcclxuICAgIC8vIHJldHVybiB7XHJcbiAgICAvLyAgICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgLy8gICAgIEJvZHk6IEpTT04uc3RyaW5naWZ5KCksXHJcbiAgICAvLyB9O1xyXG59Il19